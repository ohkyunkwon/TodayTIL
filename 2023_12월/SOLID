#SOLID (솔리드)

SRP = 단일 책임 원칙

Single Responsibility principle

- 한 클래스는 하나의 책임만 가져야한다.

- 하나의 책임이라는 것은 모호하다.

    - 클 수 있고, 작을 수 있다.

    - 문맥과 상황에 따라 다르다.

- 중요한 기준은 변경이다 변경이 있을 때 파급 효가가 적으면 단인 책임 원칙을 잘 따른것

- 예) UI변경, 객체의 생성과 사용 분리

OCP = 개방-폐쇠 원칙 #####중요

Open/closed principle

- 소프트웨어 요소는 확장에 열여 있으나 변경에는 닫혀 있어야 한다.

- 이런 거짓말 같은 말이? 확장을 하려면, 당연히 기존 코드를 변경?

- 다형성을 활용해보자

- 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현

- 지금까지 배운 역할과 구현의 분리를 생각해보자.

문제점

- MemberService 클라인트가 구현 클래스를 직접 선택

    - MemberRepository m = new MemoryMemberRepository(); //기존 코드

    - MemberRepository m = new JdbcMemberRepository(); //변경 코드

- 구현 객체를 변경하려면 클라이언드 코드를 변경해야 한다,

- 분명 다형성을 사용하지만 OCP 원칙을 지킬 수 없다.

- 이 문제를 어떻게 해결해야 하나?

- 객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다.

LSP = 리스코프 치환 원칙

Liskov substitution principle

- 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.

- 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다.

- 단순히 컴파일에 성공하는 것을 넘어서는 이야기

- 예) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반, 느리더라도 앞으로 가야함.

ISP 인터페이스 분리 원칙

Interface segregation principle

- 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.

- 자돋차 인터페이스 => 운전자 인터페이스, 정비 인터페이스로 분리

- 사용자 클라이언트 => 운전자 클라이언트, 정비사 클라이언트로 분리

- 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음

- 인터페이스가 명확해지고, 대체 가능성이 높아진다.

DIP = 의존관계 역전 원칙 ######중요

Dependency inversion principle

- 프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 의존성 주입은 이 원칙을 따르는 방법 중 하나이다.

- 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻

- 앞에서 이야기한 역할(Role)에 의존하게 해야 한다는 것과 같다. 객체 세상도 클라이언트가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다. 구현체에 의존하게 되면 변경이 아주 어려워진다.

정리

- 객체 지향의 핵심은 다형성

- 다형성 만으로는 쉽게 부품을 갈아 끼우듯이 개발할 수 없다.

- 다형성 만으로는 구현 객체를 변경할 때 클라이언트 코드도 함께 변경된다.

- 다형성 만들오는 OCP, DIP를 지킬 수 없다.

- 뭔가 더 필요하다.

스프링

- 스프링은 다음 기술로 다형성 + OCP,DIP를 가능하게 지원

    - DI(Dependency Injection): 의존 관계, 의존성 주입

    - DI 컨테이너 제공

- 클라이언트 코드의 변경 없이 기능 확장

- 쉽게 부품을 교체하듯이 개발

최종 정리

- 모든 설계에 역할과 구현을 분리하자.

- 자동차, 공연의 예를 떠올려보자.

- 애플리케이션 설계도 공연을 설계 하듯이 배역만 만들어두고, 배우는 언제든지 유연하게 변경할 수 있다록 만드는 것이 좋은 객체 지향 설계이다.

- 이상적으로는 모든 설계에 인터페이스를 부여하자.